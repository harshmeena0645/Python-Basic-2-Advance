✅ Phase 3: Hard (Advanced Python)

Advanced OOP
Decorators & Generators
Iterators
Context Managers
Multithreading
Regex
Modules & Packaging
Error Tracing
List comprehensions (nested)
Type Hints
and more

1. What is a decorator in Python? Use an example.
def decorator_func(func):
    def wrapper():
        print("Before function")
        func()
        print("After function")
    return wrapper
@decorator_func
def say_hello():
    print("Hello!")
say_hello()
Output:
Before function  
Hello!  
After function  

2. Create a generator function that yields squares of numbers.
def gen_squares(n):
    for i in range(n):
        yield i*i
for val in gen_squares(5):
    print(val)

3. What is an iterator and how do you make a class iterable?
class Count:
    def __init__(self, max):
        self.max = max
        self.curr = 0
    def __iter__(self):
        return self
    def __next__(self):
        if self.curr < self.max:
            val = self.curr
            self.curr += 1
            return val
        raise StopIteration
for num in Count(3):
    print(num)

4. What is a context manager? How is with used in Python?
with open("test.txt", "w") as f:
    f.write("Hello World")
Explanation: Automatically opens and closes the file. Context managers manage resources cleanly.

5. What is the difference between threading and multiprocessing?
threading: Shares memory, good for I/O-bound tasks
multiprocessing: Separate memory, better for CPU-bound tasks

6. Create a simple thread using threading module.
import threading

def print_num():
    for i in range(5):
        print(i)
t1 = threading.Thread(target=print_num)
t1.start()
t1.join()

7. Write a regular expression to validate an email.
import re
email = "user@example.com"
pattern = r'^\w+@\w+\.\w+$'
if re.match(pattern, email):
    print("Valid email")

8. What is the output?
a = [i for i in range(3) for j in range(2)]
print(a)
Output: [0, 0, 1, 1, 2, 2]
Explanation: Nested list comprehension.

9. What is the difference between deepcopy() and copy()?
import copy
a = [[1], [2]]
b = copy.copy(a)
c = copy.deepcopy(a)
copy() → shallow
deepcopy() → copies nested structures

10. Create a custom exception.
class MyError(Exception):
    pass
raise MyError("Something went wrong")

11. How to catch multiple exceptions?
try:
    x = 1 / 0
except (ZeroDivisionError, ValueError) as e:
    print(f"Error: {e}")

12. How to install external packages and import?
pip install requests
import requests
response = requests.get("https://api.github.com")
print(response.status_code)

13. How to create a virtual environment?
python -m venv myenv
source myenv/bin/activate  # Linux/macOS
myenv\Scripts\activate     # Windows

14. What is the use of __str__ and __repr__ in class?
class Person:
    def __str__(self):
        return "This is str"
    def __repr__(self):
        return "This is repr"
p = Person()
print(p)          # Calls __str__
print(repr(p))    # Calls __repr__

15. What is the use of type hints in Python?
def add(a: int, b: int) -> int:
    return a + b
Explanation: Improves readability and helps with static analysis tools.

16. What is a module and how do you import from it?
Suppose you have a file math_utils.py:
# math_utils.py
def add(x, y):
    return x + y
Then in another file:
from math_utils import add
print(add(2, 3))

17. Use map() and filter() together.
nums = [1, 2, 3, 4]
result = list(map(lambda x: x*x, filter(lambda x: x%2==0, nums)))
print(result)  # Output: [4, 16]

18. How to flatten a list of lists?
nested = [[1, 2], [3, 4]]
flat = [item for sublist in nested for item in sublist]
print(flat)  # Output: [1, 2, 3, 4]

19. How to use enumerate() in a loop?
for i, value in enumerate(["a", "b", "c"]):
    print(i, value)

20. How to use zip() to merge two lists into a dictionary?
keys = ["name", "age"]
values = ["Harsh", 20]
merged = dict(zip(keys, values))
print(merged)  # Output: {'name': 'Harsh', 'age': 20}
